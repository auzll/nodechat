/**
 * Created by IDE.
 * User: gzhang
 * Date: 11/6/11
 * Time: 4:49 PM
 * To change this template use File | Settings | File Templates.
 */

var validate = require('./validate.js');
var assert = require('assert');

var v = validate;

function genTester(func) {
    return function(beforeExit, assert) {
        beforeExit(function() {
            func(assert);
        });
    };
}

module.exports = {
    "test omatch should return true": genTester(function(assert) {
        var d = new Date();
        assert.ok(v.omatch({}, {}), "tester & matcher is empty object");
        assert.ok(v.omatch({a:1}, {}), "matcher is empty object, but tester not");
        assert.ok(v.omatch({a:1,b:2}, {a:1}), "tester & matcher is simple object");
        assert.ok(v.omatch({a:d,b:2}, {a:d}), "tester & matcher is simple object with date objectnh");
        assert.ok(v.omatch({a:1,b:2,c:{a:1, c:2}}, {b:2,c:{a:1}}), "matcher has a inner object");
    }),
    "test omatch should return false": genTester(function(assert) {
        assert.ok(!v.omatch("", {}), "tester is not a object");
        assert.ok(!v.omatch({a:1}, {a:1,b:2}), "simple object not match");
        assert.ok(!v.omatch({a:new Date()}, {a:new Date(0),b:2}), "simple object not match on Date");
        assert.ok(!v.omatch({a:1,b:2,c:{a:1, c:2}}, {b:2,c:{a:1,c:2,b:3}}), "inner object not match");
    }),
    "[omatch] test array" : genTester(function(assert) {
        assert.ok(v.omatch([], []), "empty array");
        assert.ok(v.omatch([1,2,3], [1,2]), "number array");
        assert.ok(v.omatch({a:1,b:[1,2]}, {a:1,b:[1]}), "object with array");
        assert.ok(!v.omatch({a:1,b:[1,2]}, {a:1,b:[1,2,3]}), "object with array");
        assert.ok(!v.omatch({a:1,b:[1,2,4]}, {a:1,b:[1,2,3]}), "object with array");
    }),
    "[omatch] bug test1" : genTester(function(assert) {
        var obj1 = JSON.parse('{"status":200,"body":{"status":"success","data":[{"id":1,"content":"<div>not tag note</div>","cid":1,"tid1":0,"tid2":0,"tid3":0,"tid4":0,"created":"2011-11-07T00:02:39.000Z"}]},"type":"application/json; charset=utf-8","headers":{"x-powered-by":"Express","content-type":"application/json; charset=utf-8","content-length":"155","connection":"keep-alive"}}');
        var obj2 = JSON.parse('{"status":200,"body":{"status":"success","data":[{"id":1,"content":"<div>not tag note</div>","cid":1,"tid1":0,"tid2":0,"tid3":0,"tid4":0,"created":"2011-11-07T00:02:39.000Z"}]},"type":"application/json; charset=utf-8"}');
        assert.ok(v.omatch(obj1,obj2), "should not see this message...");
    })
};























