/**
 * Created by IDE.
 * User: gzhang
 * Date: 11/5/11
 * Time: 7:20 PM
 * To change this template use File | Settings | File Templates.
 */

var llib = {};
var ANSI_CODES = {
    "off": 0,
    "bold": 1,
    "italic": 3,
    "underline": 4,
    "blink": 5,
    "inverse": 7,
    "hidden": 8,
    "black": 30,
    "red": 31,
    "green": 32,
    "yellow": 33,
    "blue": 34,
    "magenta": 35,
    "cyan": 36,
    "white": 37,
    "black_bg": 40,
    "red_bg": 41,
    "green_bg": 42,
    "yellow_bg": 43,
    "blue_bg": 44,
    "magenta_bg": 45,
    "cyan_bg": 46,
    "white_bg": 47
};

llib = {
    isOneType: function() {
        if (arguments.length < 2) return true;
        var one = arguments[0];
        var t = this.typeOf(one);
        for (var i = arguments.length; i --;) {
            if (this.typeOf(arguments[i]) != t) {
                return false;
            }
        }
        return true;
    },
    typeOf: function (obj) {
        var t = Object.prototype.toString.apply(obj);
        switch (t) {
            case "[object String]":
                return "String";
            case "[object Object]":
                return "Object";
            case "[object Number]":
                return "Number";
            case "[object Array]":
                return "Array";
            case "[object Null]":
                return "Null";
            case "[object Undefined]":
                return "Undefined";
            case "[object Date]":
                return "Date";
            case "[object RegExp]":
                return "RegExp";
            default:
                return t.slice(8, t.length - 1);
        }
    },
    //color will be a string(predefine color) or a number
    //colorize("%[error]% hello %world% %warning%!", "red", "green", "yellow,bold")
    // [error] will red , world will be green, warning will be yellow & bold
    // % can not use in str except for mark color...
    colorize: function(str, color) {
        if (this.typeOf(str) == "Undefined") return ANSI_CODES;
        if (!color) return str;
        if (str.match(/%%/)) return str;
        var ci = 1, argn = arguments.length;
        var m = null, cf = "", head = "", tail = "",color_attrs = [];
        var color_str = str, reg = /([^%]|^)%([^%]+)%([^%]|$)/;
        var cnt = 100;
        while (reg.test(color_str) && (cnt--)) {
            //reset head & tail
            if (ci < argn) {
                color_attrs = arguments[ci++].split(",");
                head = "";
                for (var i = 0,attr; attr = color_attrs[i]; i++) {
                    head += "\033[" + ANSI_CODES[attr] + "m";
                }
                tail = "\033[" + ANSI_CODES["off"] + "m";
            }
            color_str = color_str.replace(reg, ("$1" + head + "$2" + tail + "$3"));
        }
        return color_str.replace(/%%/g, "%");
    },
    extend: function(obj, inf) {
        var e = (this.typeOf(obj) == "Function") ? obj.prototype : obj;
        for (var f in inf) {
            e[f] = inf[f];
        }
        return obj;
    },
    bashing: function (script, callback) {
        var bash = require('child_process').spawn("/bin/bash", ['-c', script]);
        var stdout = "", stderr = "";
        bash.stdout.on('data', function(data) {
            stdout += data;
        });
        bash.stderr.on('data', function(data) {
            stderr += data;
        });
        bash.on('exit', function(code) {
            callback(code, stdout, stderr);
        });
    },
    serialCall: function(self, fns, callback) {
        var i = 0;
        var args = Array.prototype.slice.call(arguments, 3);
        var flag = false;
        var entry = function(err) {
            if (flag && err) throw err;
            var fun = fns[i++];
            if (err || (!fun)) {
                flag = true;
                callback(err);
            } else if (fun) {
                try {
                    fun.apply(self, args);
                } catch(e) {
                    arguments.callee(e);
                }
            }
        };
        args.unshift(entry);
        entry();
    },
    serialFullCall: function(self, fns, callback) {
        var i = 0, errors = [];
        var args = Array.prototype.slice.call(arguments, 3);
        var flag = false;
        var entry = function(err) {
            if (flag && err) throw err;
            if (i > 0) errors.push(err);
            var fun = fns[i++];
            if (fun) {
                try {
                    fun.apply(self, args);
                } catch(e) {
                    arguments.callee(e);
                }
            } else if (!flag) {
                flag = true;
                callback(errors);
            }
        };
        args.unshift(entry);
        entry();
    }
};

module.exports = llib;
