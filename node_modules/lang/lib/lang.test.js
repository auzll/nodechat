/**
 * Created by IDE.
 * User: gzhang
 * Date: 11/5/11
 * Time: 7:25 PM
 * To change this template use File | Settings | File Templates.
 */

var lang = require('./lang.js');
var assert = require('assert');
var util = require('util');


module.exports = {
    "test serial call": function() {
        var rs = [];
        var ex = [3, 11, 3, 11], error = new Error("mock a error"), error1 = Error("another error");

        function test1(next, a, b) {
            rs.push(a + b);
            next();
        }

        function test2(next, a) {
            rs.push(this.a + this.b + a);
            next();
        }

        function errorThrow() {
            throw error
        }

        var fns = [test1, test2, test1, test2, errorThrow, test1];
        var obj = {
            a: 3,
            b: 7
        };
        try {
            lang.serialCall(obj, fns, function(e) {
                assert.equal(error, e);
                assert.deepEqual(ex, rs);
                throw error1
            }, 1, 2);
        } catch(e) {
            if(error1 !== e) throw e;
        }
        // todo make to another function
        rs = [];
        fns = [test1, test2, test1, test2, errorThrow, test1, errorThrow, test2];
        ex = [3, 11, 3, 11,3,11];
        exErr = [,,,,error,,error,,1];
        exErr.pop();
        try {
            lang.serialFullCall(obj, fns, function(errs) {
                for(var i = exErr.length; i --;){
                    assert.equal(exErr[i], errs[i]);
                }
                assert.deepEqual(ex, rs);
                throw error1
            }, 1, 2);
        } catch(e) {
            if(error1 !== e) throw e;
        }

    },
    "test bashing" : function() {
        var str = "hello world!";
        var script = util.format('echo -n "%s";', str);
        lang.bashing(script, function(code, stdout, stderr) {
            assert.equal(code, 0, "should return zero");
            assert.equal(stdout, str, util.format("should be return %s", str));
        });
        lang.bashing("inotseeyou;", function(code, stdout, stderr) {
            assert.notEqual(code, 0, "should not equal zero, a fail test");
        });
    },
    "test extend": function() {
        var TestObject = function() {
            this.a = 2;
            this.b = 5;
        };
        var nobj = new TestObject();
        var obj = {a:1,b:2};
        var inf = { plus: function() {
            return this.a + this.b;
        }};
        var eobj = lang.extend(obj, inf);
        var enobj = lang.extend(nobj, inf);
        assert.equal(eobj.plus(), 3);
        assert.equal(enobj.plus(), 7);
    },
    "test colorize" : function() {
        var expect = "\u001b[31m[error]\u001b[0m hello \u001b[32mworld\u001b[0m \u001b[33m\u001b[1mwarning\u001b[0m!";
        var actual = lang.colorize("%[error]% hello %world% %warning%!", "red", "green", "yellow,bold");
        assert.equal(actual, expect);
        assert.equal(lang.colorize(expect), expect, "actual & expect should be same");
    },
    "test isOneType ": function() {
        var obj = {};
        var b,c;
        assert.ok(lang.isOneType(1, 2), "num,num");
        assert.ok(lang.isOneType("", "fsgds"), "empty_string, string");
        assert.ok(lang.isOneType({a:1}, {}), "object, object");
        assert.ok(lang.isOneType(null, null), "null, null");
        assert.ok(lang.isOneType('1', '2'), "string, string");
        assert.ok(lang.isOneType(b, c), "undefined, undefined");
        assert.ok(lang.isOneType(obj.a, b), "obj.undefined, undefined");
        assert.ok(!lang.isOneType(null, {}), "null, empty_object");
        assert.ok(!lang.isOneType(null, 2), "null, num");
        assert.ok(!lang.isOneType('1', 2), "string, num");
        assert.ok(!lang.isOneType(obj, b), "object, undefined");
    },
    "test typeOf with array": function() {
        assert.equal(lang.typeOf([]), "Array");
    },
    "test typeOf with number": function() {
        assert.equal(lang.typeOf(12), "Number");
        assert.equal(lang.typeOf(12.1), "Number");
        assert.equal(lang.typeOf(0), "Number");
        assert.equal(lang.typeOf(Number(1)), "Number");
    },
    "test typeOf with object": function() {
        assert.equal(lang.typeOf({}), "Object");
        assert.equal(lang.typeOf({a:1}), "Object");
    },
    "test typeOf with null": function() {
        assert.equal(lang.typeOf(null), "Null");
    },
    "test typeOf with string": function() {
        assert.equal(lang.typeOf("string"), "String");
        assert.equal(lang.typeOf(String("abc")), "String");
    },
    "test typeOf with undefined": function() {
        var obj = {};
        var b;
        assert.equal(lang.typeOf(obj.b), "Undefined");
        assert.equal(lang.typeOf(b), "Undefined");
    },
    "test typeOf with date" : function() {
        assert.equal(lang.typeOf(new Date()), "Date");
    },
    "test typeOf with function": function() {
        assert.equal(lang.typeOf(function() {
        }), "Function");
    }
};